/*! guxiaoming:8138f7606ba95e6dc5f3d345dc9a6a199ae7015a */
!function(I,g){if("object"==typeof exports&&"object"==typeof module)module.exports=g();else if("function"==typeof define&&define.amd)define([],g);else{var C=g();for(var A in C)("object"==typeof exports?exports:I)[A]=C[A]}}(window,(function(){return function(I){var g={};function C(A){if(g[A])return g[A].exports;var c=g[A]={i:A,l:!1,exports:{}};return I[A].call(c.exports,c,c.exports,C),c.l=!0,c.exports}return C.m=I,C.c=g,C.d=function(I,g,A){C.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:A})},C.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},C.t=function(I,g){if(1&g&&(I=C(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var A=Object.create(null);if(C.r(A),Object.defineProperty(A,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var c in I)C.d(A,c,function(g){return I[g]}.bind(null,c));return A},C.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return C.d(g,"a",g),g},C.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},C.p="",C(C.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/srs.sdk.js\n\n//\n// Copyright (c) 2013-2021 Winlin\n//\n// SPDX-License-Identifier: MIT\n//\n\n\n\nfunction SrsError(name, message) {\n    this.name = name;\n    this.message = message;\n    this.stack = (new Error()).stack;\n}\nSrsError.prototype = Object.create(Error.prototype);\nSrsError.prototype.constructor = SrsError;\n\n// Depends on adapter-7.4.0.min.js from https://github.com/webrtc/adapter\n// Async-awat-prmise based SRS RTC Publisher.\nfunction SrsRtcPublisherAsync() {\n    var self = {};\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    self.constraints = {\n        audio: true,\n        video: {\n            width: {ideal: 320, max: 576}\n        }\n    };\n\n    // @see https://github.com/rtcdn/rtcdn-draft\n    // @url The WebRTC url to play with, for example:\n    //      webrtc://r.ossrs.net/live/livestream\n    // or specifies the API port:\n    //      webrtc://r.ossrs.net:11985/live/livestream\n    // or autostart the publish:\n    //      webrtc://r.ossrs.net/live/livestream?autostart=true\n    // or change the app from live to myapp:\n    //      webrtc://r.ossrs.net:11985/myapp/livestream\n    // or change the stream from livestream to mystream:\n    //      webrtc://r.ossrs.net:11985/live/mystream\n    // or set the api server to myapi.domain.com:\n    //      webrtc://myapi.domain.com/live/livestream\n    // or set the candidate(eip) of answer:\n    //      webrtc://r.ossrs.net/live/livestream?candidate=39.107.238.185\n    // or force to access https API:\n    //      webrtc://r.ossrs.net/live/livestream?schema=https\n    // or use plaintext, without SRTP:\n    //      webrtc://r.ossrs.net/live/livestream?encrypt=false\n    // or any other information, will pass-by in the query:\n    //      webrtc://r.ossrs.net/live/livestream?vhost=xxx\n    //      webrtc://r.ossrs.net/live/livestream?token=xxx\n    self.publish = async function (url) {\n        var conf = self.__internal.prepareUrl(url);\n        self.pc.addTransceiver("audio", {direction: "sendonly"});\n        self.pc.addTransceiver("video", {direction: "sendonly"});\n\n        if (!navigator.mediaDevices && window.location.protocol === \'http:\' && window.location.hostname !== \'localhost\') {\n            throw new SrsError(\'HttpsRequiredError\', `Please use HTTPS or localhost to publish, read https://github.com/ossrs/srs/issues/2762#issuecomment-983147576`);\n        }\n        var stream = await navigator.mediaDevices.getUserMedia(self.constraints);\n\n        // @see https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addStream#Migrating_to_addTrack\n        stream.getTracks().forEach(function (track) {\n            self.pc.addTrack(track);\n\n            // Notify about local track when stream is ok.\n            self.ontrack && self.ontrack({track: track});\n        });\n\n        var offer = await self.pc.createOffer();\n        await self.pc.setLocalDescription(offer);\n        var session = await new Promise(function (resolve, reject) {\n            // @see https://github.com/rtcdn/rtcdn-draft\n            var data = {\n                api: conf.apiUrl, tid: conf.tid, streamurl: conf.streamUrl,\n                clientip: null, sdp: offer.sdp\n            };\n            console.log("Generated offer: ", data);\n\n            const xhr = new XMLHttpRequest();\n            xhr.onload = function() {\n                if (xhr.readyState !== xhr.DONE) return;\n                if (xhr.status !== 200) return reject(xhr);\n                const data = JSON.parse(xhr.responseText);\n                console.log("Got answer: ", data);\n                return data.code ? reject(xhr) : resolve(data);\n            }\n            xhr.open(\'POST\', conf.apiUrl, true);\n            xhr.setRequestHeader(\'Content-type\', \'application/json\');\n            xhr.send(JSON.stringify(data));\n        });\n        await self.pc.setRemoteDescription(\n            new RTCSessionDescription({type: \'answer\', sdp: session.sdp})\n        );\n        session.simulator = conf.schema + \'//\' + conf.urlObject.server + \':\' + conf.port + \'/rtc/v1/nack/\';\n\n        return session;\n    };\n\n    // Close the publisher.\n    self.close = function () {\n        self.pc && self.pc.close();\n        self.pc = null;\n    };\n\n    // The callback when got local stream.\n    // @see https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addStream#Migrating_to_addTrack\n    self.ontrack = function (event) {\n        // Add track to stream of SDK.\n        self.stream.addTrack(event.track);\n    };\n\n    // Internal APIs.\n    self.__internal = {\n        defaultPath: \'/rtc/v1/publish/\',\n        prepareUrl: function (webrtcUrl) {\n            var urlObject = self.__internal.parse(webrtcUrl);\n\n            // If user specifies the schema, use it as API schema.\n            var schema = urlObject.user_query.schema;\n            schema = schema ? schema + \':\' : window.location.protocol;\n\n            var port = urlObject.port || 1985;\n            if (schema === \'https:\') {\n                port = urlObject.port || 443;\n            }\n\n            // @see https://github.com/rtcdn/rtcdn-draft\n            var api = urlObject.user_query.play || self.__internal.defaultPath;\n            if (api.lastIndexOf(\'/\') !== api.length - 1) {\n                api += \'/\';\n            }\n\n            apiUrl = schema + \'//\' + urlObject.server + \':\' + port + api;\n            for (var key in urlObject.user_query) {\n                if (key !== \'api\' && key !== \'play\') {\n                    apiUrl += \'&\' + key + \'=\' + urlObject.user_query[key];\n                }\n            }\n            // Replace /rtc/v1/play/&k=v to /rtc/v1/play/?k=v\n            var apiUrl = apiUrl.replace(api + \'&\', api + \'?\');\n\n            var streamUrl = urlObject.url;\n\n            return {\n                apiUrl: apiUrl, streamUrl: streamUrl, schema: schema, urlObject: urlObject, port: port,\n                tid: Number(parseInt(new Date().getTime()*Math.random()*100)).toString(16).slice(0, 7)\n            };\n        },\n        parse: function (url) {\n            // @see: http://stackoverflow.com/questions/10469575/how-to-use-location-object-to-parse-url-without-redirecting-the-page-in-javascri\n            var a = document.createElement("a");\n            a.href = url.replace("rtmp://", "http://")\n                .replace("webrtc://", "http://")\n                .replace("rtc://", "http://");\n\n            var vhost = a.hostname;\n            var app = a.pathname.substring(1, a.pathname.lastIndexOf("/"));\n            var stream = a.pathname.slice(a.pathname.lastIndexOf("/") + 1);\n\n            // parse the vhost in the params of app, that srs supports.\n            app = app.replace("...vhost...", "?vhost=");\n            if (app.indexOf("?") >= 0) {\n                var params = app.slice(app.indexOf("?"));\n                app = app.slice(0, app.indexOf("?"));\n\n                if (params.indexOf("vhost=") > 0) {\n                    vhost = params.slice(params.indexOf("vhost=") + "vhost=".length);\n                    if (vhost.indexOf("&") > 0) {\n                        vhost = vhost.slice(0, vhost.indexOf("&"));\n                    }\n                }\n            }\n\n            // when vhost equals to server, and server is ip,\n            // the vhost is __defaultVhost__\n            if (a.hostname === vhost) {\n                var re = /^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/;\n                if (re.test(a.hostname)) {\n                    vhost = "__defaultVhost__";\n                }\n            }\n\n            // parse the schema\n            var schema = "rtmp";\n            if (url.indexOf("://") > 0) {\n                schema = url.slice(0, url.indexOf("://"));\n            }\n\n            var port = a.port;\n            if (!port) {\n                // Finger out by webrtc url, if contains http or https port, to overwrite default 1985.\n                if (schema === \'webrtc\' && url.indexOf(`webrtc://${a.host}:`) === 0) {\n                    port = (url.indexOf(`webrtc://${a.host}:80`) === 0) ? 80 : 443;\n                }\n\n                // Guess by schema.\n                if (schema === \'http\') {\n                    port = 80;\n                } else if (schema === \'https\') {\n                    port = 443;\n                } else if (schema === \'rtmp\') {\n                    port = 1935;\n                }\n            }\n\n            var ret = {\n                url: url,\n                schema: schema,\n                server: a.hostname, port: port,\n                vhost: vhost, app: app, stream: stream\n            };\n            self.__internal.fill_query(a.search, ret);\n\n            // For webrtc API, we use 443 if page is https, or schema specified it.\n            if (!ret.port) {\n                if (schema === \'webrtc\' || schema === \'rtc\') {\n                    if (ret.user_query.schema === \'https\') {\n                        ret.port = 443;\n                    } else if (window.location.href.indexOf(\'https://\') === 0) {\n                        ret.port = 443;\n                    } else {\n                        // For WebRTC, SRS use 1985 as default API port.\n                        ret.port = 1985;\n                    }\n                }\n            }\n\n            return ret;\n        },\n        fill_query: function (query_string, obj) {\n            // pure user query object.\n            obj.user_query = {};\n\n            if (query_string.length === 0) {\n                return;\n            }\n\n            // split again for angularjs.\n            if (query_string.indexOf("?") >= 0) {\n                query_string = query_string.split("?")[1];\n            }\n\n            var queries = query_string.split("&");\n            for (var i = 0; i < queries.length; i++) {\n                var elem = queries[i];\n\n                var query = elem.split("=");\n                obj[query[0]] = query[1];\n                obj.user_query[query[0]] = query[1];\n            }\n\n            // alias domain for vhost.\n            if (obj.domain) {\n                obj.vhost = obj.domain;\n            }\n        }\n    };\n\n    self.pc = new RTCPeerConnection(null);\n\n    // To keep api consistent between player and publisher.\n    // @see https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addStream#Migrating_to_addTrack\n    // @see https://webrtc.org/getting-started/media-devices\n    self.stream = new MediaStream();\n\n    return self;\n}\n\n// Depends on adapter-7.4.0.min.js from https://github.com/webrtc/adapter\n// Async-await-promise based SRS RTC Player.\nfunction SrsRtcPlayerAsync() {\n    var self = {};\n\n    // @see https://github.com/rtcdn/rtcdn-draft\n    // @url The WebRTC url to play with, for example:\n    //      webrtc://r.ossrs.net/live/livestream\n    // or specifies the API port:\n    //      webrtc://r.ossrs.net:11985/live/livestream\n    //      webrtc://r.ossrs.net:80/live/livestream\n    // or autostart the play:\n    //      webrtc://r.ossrs.net/live/livestream?autostart=true\n    // or change the app from live to myapp:\n    //      webrtc://r.ossrs.net:11985/myapp/livestream\n    // or change the stream from livestream to mystream:\n    //      webrtc://r.ossrs.net:11985/live/mystream\n    // or set the api server to myapi.domain.com:\n    //      webrtc://myapi.domain.com/live/livestream\n    // or set the candidate(eip) of answer:\n    //      webrtc://r.ossrs.net/live/livestream?candidate=39.107.238.185\n    // or force to access https API:\n    //      webrtc://r.ossrs.net/live/livestream?schema=https\n    // or use plaintext, without SRTP:\n    //      webrtc://r.ossrs.net/live/livestream?encrypt=false\n    // or any other information, will pass-by in the query:\n    //      webrtc://r.ossrs.net/live/livestream?vhost=xxx\n    //      webrtc://r.ossrs.net/live/livestream?token=xxx\n    self.play = async function(url) {\n        var conf = self.__internal.prepareUrl(url);\n        self.pc.addTransceiver("audio", {direction: "recvonly"});\n        self.pc.addTransceiver("video", {direction: "recvonly"});\n\n        var offer = await self.pc.createOffer();\n        await self.pc.setLocalDescription(offer);\n        var session = await new Promise(function(resolve, reject) {\n            // @see https://github.com/rtcdn/rtcdn-draft\n            var data = {\n                api: conf.apiUrl, tid: conf.tid, streamurl: conf.streamUrl,\n                clientip: null, sdp: offer.sdp\n            };\n            console.log("Generated offer: ", data);\n\n            const xhr = new XMLHttpRequest();\n            xhr.onload = function() {\n                if (xhr.readyState !== xhr.DONE) return;\n                if (xhr.status !== 200) return reject(xhr);\n                const data = JSON.parse(xhr.responseText);\n                console.log("Got answer: ", data);\n                return data.code ? reject(xhr) : resolve(data);\n            }\n            xhr.open(\'POST\', conf.apiUrl, true);\n            xhr.setRequestHeader(\'Content-type\', \'application/json\');\n            xhr.send(JSON.stringify(data));\n        });\n        await self.pc.setRemoteDescription(\n            new RTCSessionDescription({type: \'answer\', sdp: session.sdp})\n        );\n        session.simulator = conf.schema + \'//\' + conf.urlObject.server + \':\' + conf.port + \'/rtc/v1/nack/\';\n\n        return session;\n    };\n\n    // Close the player.\n    self.close = function() {\n        self.pc && self.pc.close();\n        self.pc = null;\n    };\n\n    // The callback when got remote track.\n    // Note that the onaddstream is deprecated, @see https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onaddstream\n    self.ontrack = function (event) {\n        // https://webrtc.org/getting-started/remote-streams\n        self.stream.addTrack(event.track);\n    };\n\n    // Internal APIs.\n    self.__internal = {\n        defaultPath: \'/rtc/v1/play/\',\n        prepareUrl: function (webrtcUrl) {\n            var urlObject = self.__internal.parse(webrtcUrl);\n\n            // If user specifies the schema, use it as API schema.\n            var schema = urlObject.user_query.schema;\n            schema = schema ? schema + \':\' : window.location.protocol;\n\n            if(schema == "file:"){\n                schema = "http:";\n                console.log(schema);\n            }\n\n            var port = urlObject.port || 1985;\n            if (schema === \'https:\') {\n                port = urlObject.port || 443;\n            }\n\n            // @see https://github.com/rtcdn/rtcdn-draft\n            var api = urlObject.user_query.play || self.__internal.defaultPath;\n            if (api.lastIndexOf(\'/\') !== api.length - 1) {\n                api += \'/\';\n            }\n\n            apiUrl = schema + \'//\' + urlObject.server + \':\' + port + api;\n            for (var key in urlObject.user_query) {\n                if (key !== \'api\' && key !== \'play\') {\n                    apiUrl += \'&\' + key + \'=\' + urlObject.user_query[key];\n                }\n            }\n            // Replace /rtc/v1/play/&k=v to /rtc/v1/play/?k=v\n            var apiUrl = apiUrl.replace(api + \'&\', api + \'?\');\n\n            var streamUrl = urlObject.url;\n\n            return {\n                apiUrl: apiUrl, streamUrl: streamUrl, schema: schema, urlObject: urlObject, port: port,\n                tid: Number(parseInt(new Date().getTime()*Math.random()*100)).toString(16).slice(0, 7)\n            };\n        },\n        parse: function (url) {\n            // @see: http://stackoverflow.com/questions/10469575/how-to-use-location-object-to-parse-url-without-redirecting-the-page-in-javascri\n            var a = document.createElement("a");\n            a.href = url.replace("rtmp://", "http://")\n                .replace("webrtc://", "http://")\n                .replace("rtc://", "http://");\n\n            var vhost = a.hostname;\n            var app = a.pathname.substring(1, a.pathname.lastIndexOf("/"));\n            var stream = a.pathname.slice(a.pathname.lastIndexOf("/") + 1);\n\n            // parse the vhost in the params of app, that srs supports.\n            app = app.replace("...vhost...", "?vhost=");\n            if (app.indexOf("?") >= 0) {\n                var params = app.slice(app.indexOf("?"));\n                app = app.slice(0, app.indexOf("?"));\n\n                if (params.indexOf("vhost=") > 0) {\n                    vhost = params.slice(params.indexOf("vhost=") + "vhost=".length);\n                    if (vhost.indexOf("&") > 0) {\n                        vhost = vhost.slice(0, vhost.indexOf("&"));\n                    }\n                }\n            }\n\n            // when vhost equals to server, and server is ip,\n            // the vhost is __defaultVhost__\n            if (a.hostname === vhost) {\n                var re = /^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/;\n                if (re.test(a.hostname)) {\n                    vhost = "__defaultVhost__";\n                }\n            }\n\n            // parse the schema\n            var schema = "rtmp";\n            if (url.indexOf("://") > 0) {\n                schema = url.slice(0, url.indexOf("://"));\n            }\n\n            var port = a.port;\n            if (!port) {\n                // Finger out by webrtc url, if contains http or https port, to overwrite default 1985.\n                if (schema === \'webrtc\' && url.indexOf(`webrtc://${a.host}:`) === 0) {\n                    port = (url.indexOf(`webrtc://${a.host}:80`) === 0) ? 80 : 443;\n                }\n\n                // Guess by schema.\n                if (schema === \'http\') {\n                    port = 80;\n                } else if (schema === \'https\') {\n                    port = 443;\n                } else if (schema === \'rtmp\') {\n                    port = 1935;\n                }\n            }\n\n            var ret = {\n                url: url,\n                schema: schema,\n                server: a.hostname, port: port,\n                vhost: vhost, app: app, stream: stream\n            };\n            self.__internal.fill_query(a.search, ret);\n\n            // For webrtc API, we use 443 if page is https, or schema specified it.\n            if (!ret.port) {\n                if (schema === \'webrtc\' || schema === \'rtc\') {\n                    if (ret.user_query.schema === \'https\') {\n                        ret.port = 443;\n                    } else if (window.location.href.indexOf(\'https://\') === 0) {\n                        ret.port = 443;\n                    } else {\n                        // For WebRTC, SRS use 1985 as default API port.\n                        ret.port = 1985;\n                    }\n                }\n            }\n\n            return ret;\n        },\n        fill_query: function (query_string, obj) {\n            // pure user query object.\n            obj.user_query = {};\n\n            if (query_string.length === 0) {\n                return;\n            }\n\n            // split again for angularjs.\n            if (query_string.indexOf("?") >= 0) {\n                query_string = query_string.split("?")[1];\n            }\n\n            var queries = query_string.split("&");\n            for (var i = 0; i < queries.length; i++) {\n                var elem = queries[i];\n\n                var query = elem.split("=");\n                obj[query[0]] = query[1];\n                obj.user_query[query[0]] = query[1];\n            }\n\n            // alias domain for vhost.\n            if (obj.domain) {\n                obj.vhost = obj.domain;\n            }\n        }\n    };\n\n    //=========================\n    // const pcOptional ={\n    //     optional:[{googCpuOveruseDetection:false}]\n    //   };\n    // const configuration = {\n    //     iceServers: [{\n    //         urls: "turn:avc.agree.cn:50111",\n    //         username: "agree",\n    //         credential: "agree"\n    //     }], \n    //     iceTransportPolicy: "relay"\n    // }\n    // self.pc = new RTCPeerConnection(configuration,pcOptional);\n    //=========================\n    self.pc = new RTCPeerConnection(null);\n\n    // Create a stream to add track to the stream, @see https://webrtc.org/getting-started/remote-streams\n    self.stream = new MediaStream();\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ontrack\n    self.pc.ontrack = function(event) {\n        if (self.ontrack) {\n            self.ontrack(event);\n        }\n    };\n\n    return self;\n}\n\n// Format the codec of RTCRtpSender, kind(audio/video) is optional filter.\n// https://developer.mozilla.org/en-US/docs/Web/Media/Formats/WebRTC_codecs#getting_the_supported_codecs\nfunction SrsRtcFormatSenders(senders, kind) {\n    var codecs = [];\n    senders.forEach(function (sender) {\n        var params = sender.getParameters();\n        params && params.codecs && params.codecs.forEach(function(c) {\n            if (kind && sender.track.kind !== kind) {\n                return;\n            }\n\n            if (c.mimeType.indexOf(\'/red\') > 0 || c.mimeType.indexOf(\'/rtx\') > 0 || c.mimeType.indexOf(\'/fec\') > 0) {\n                return;\n            }\n\n            var s = \'\';\n\n            s += c.mimeType.replace(\'audio/\', \'\').replace(\'video/\', \'\');\n            s += \', \' + c.clockRate + \'HZ\';\n            if (sender.track.kind === "audio") {\n                s += \', channels: \' + c.channels;\n            }\n            s += \', pt: \' + c.payloadType;\n\n            codecs.push(s);\n        });\n    });\n    return codecs.join(", ");\n}\n\n\n// CONCATENATED MODULE: ./src/index.js\n\r\n\r\nclass src_client {\r\n    constructor() {\r\n        this.players =[];\r\n        this.playVideos =[];\r\n    }\r\n    initPlayer(streamAlias){\r\n        this.players[streamAlias] = new SrsRtcPlayerAsync();\r\n    }\r\n    play(url,video,streamAlias){\r\n        this.playVideos[streamAlias] = video;\r\n        let player =this.players[streamAlias];\r\n        video.srcObject = player.stream;\r\n        player.play(url).then(function (session) {\r\n            console.log(url);\r\n        }).catch(function (reason) {\r\n            player.close();\r\n            console.error(reason);\r\n        });\r\n    }\r\n    stopPlay(streamAlias){\r\n        this.playVideos[streamAlias].srcObject = null;\r\n        this.players[streamAlias].close();\r\n    }\r\n}\r\nsrc_client = new src_client();\r\n/* harmony default export */ var src = (src_client);\r\n\n// CONCATENATED MODULE: ./src/amps.js\n\r\nwindow.ampsSDK = {\r\n    initPlayer: function (streamAlias) {\r\n        console.log("AMPS-initPlayer");\r\n        src.initPlayer(streamAlias);\r\n    },\r\n    play: function (url,video,streamAlias) { \r\n        console.log("AMPS-play");\r\n        src.play(url,video,streamAlias);\r\n    },\r\n    stopPlay: function (streamAlias) {\r\n        console.log("AMPS-stopPlay");\r\n        src.stopPlay(streamAlias);\r\n    }\r\n\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')}])}));